{
  "address": "0xf49a30a3205E9E1f1AC748481f26BAeD344Fb3A9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PUCHASE_LIMIT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numOfTokens",
          "type": "uint256"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dropDeployer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getNumAvailableToMint",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTicketCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAllowListActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBlindboxOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSaleActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numOfTokens",
          "type": "uint8"
        }
      ],
      "name": "mintAllowList",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "numOfTokens",
          "type": "uint8"
        }
      ],
      "name": "mintTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint8",
          "name": "numAllowedToMint",
          "type": "uint8"
        }
      ],
      "name": "setAllowList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isAllowListActive",
          "type": "bool"
        }
      ],
      "name": "setIsAllowListActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isBlindboxOpen",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_ticketURI",
          "type": "string"
        }
      ],
      "name": "setIsBlindboxOpen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_newState",
          "type": "bool"
        }
      ],
      "name": "setSaleState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x271ebee22c0d0fbb123110e0d82952ad3bc5e6ee1f6ceb60a1b6fb4d06304109",
  "receipt": {
    "to": null,
    "from": "0x96bb36Cd53B5eAE6dC5d284DeC0ce8793Ffa50bB",
    "contractAddress": "0xf49a30a3205E9E1f1AC748481f26BAeD344Fb3A9",
    "transactionIndex": 15,
    "gasUsed": "3527093",
    "logsBloom": "0x
    "blockHash": "0x79f68c4862d1dbbfd52171b30488c16b0e827d09fb99e404d6392173ebcfb22b",
    "transactionHash": "0x271ebee22c0d0fbb123110e0d82952ad3bc5e6ee1f6ceb60a1b6fb4d06304109",
    "logs": [],
    "blockNumber": 11165494,
    "cumulativeGasUsed": "10253941",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "d972043f2fe80d1de912a3e1e645933f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PUCHASE_LIMIT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfTokens\",\"type\":\"uint256\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNumAvailableToMint\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllowListActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBlindboxOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numOfTokens\",\"type\":\"uint8\"}],\"name\":\"mintAllowList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"numOfTokens\",\"type\":\"uint8\"}],\"name\":\"mintTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"numAllowedToMint\",\"type\":\"uint8\"}],\"name\":\"setAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAllowListActive\",\"type\":\"bool\"}],\"name\":\"setIsAllowListActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBlindboxOpen\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_ticketURI\",\"type\":\"string\"}],\"name\":\"setIsBlindboxOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newState\",\"type\":\"bool\"}],\"name\":\"setSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"devMint(uint256)\":{\"details\":\"deployer can mint specific ammount of nft token without paying ps. or use mintAllowList directally\"},\"dropDeployer()\":{\"details\":\"transfer the ownership of the contract to null address\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintTicket(uint8)\":{\"details\":\"free mint successfully for the first time minter however, once one own the nft, should pay to mint more (free mint, >1 mint cost). ps: if wanna random mint can use chainlink\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/travelNFT_mint.sol\":\"travelNFT_mint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/travelNFT_mint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract travelNFT_mint is ERC721 {\\n    using Strings for uint256;\\n\\n    // Contract\\n    address payable internal deployer;\\n\\n    // Allowlist (whitelist)\\n    bool public isAllowListActive;\\n    mapping(address => uint8) private allowList;\\n\\n    // Market\\n    bool public isSaleActive;\\n    uint256 private s_saledConuter;\\n    uint8 public constant PUCHASE_LIMIT = 3;\\n    uint256 public constant SALE_LIMIT = 1000; //temporally set\\n    uint256 private constant PRICE_PER_TICKET = 1000000; //temporally set\\n\\n    // Metadata, Uri\\n    bool public isBlindboxOpen;\\n    string private ticketURI =\\n        \\\"https://ipfs.io/ipfs/QmTupSXieyjY9Sc9zCf4v7gmAHtnCWXrfyrt8XqzWrJhVE/\\\"; //blindTokenURI\\n\\n    /* Functions */\\n    constructor() ERC721(\\\"Go Traveling\\\", \\\"Trav Ticket\\\") {\\n        s_saledConuter = 1;\\n        deployer = payable(msg.sender);\\n        isSaleActive = false;\\n        isAllowListActive = false;\\n        isBlindboxOpen = false;\\n    }\\n\\n    modifier onlyDeployer() {\\n        require(msg.sender == deployer, \\\"Only deployer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev transfer the ownership of the contract to null address\\n     */\\n    function dropDeployer() external onlyDeployer {\\n        deployer = payable(address(0));\\n    }\\n\\n    function setIsAllowListActive(bool _isAllowListActive) external onlyDeployer {\\n        isAllowListActive = _isAllowListActive;\\n    }\\n\\n    function setSaleState(bool _newState) external onlyDeployer {\\n        isSaleActive = _newState;\\n    }\\n\\n    function setAllowList(address[] calldata addresses, uint8 numAllowedToMint)\\n        external\\n        onlyDeployer\\n    {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            allowList[addresses[i]] = numAllowedToMint;\\n        }\\n    }\\n\\n    function setIsBlindboxOpen(bool _isBlindboxOpen, string memory _ticketURI)\\n        external\\n        onlyDeployer\\n    {\\n        isBlindboxOpen = _isBlindboxOpen;\\n        ticketURI = _ticketURI;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return ticketURI;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        // _requireMinted(tokenId);\\n        require(tokenId <= getTokenCounter(), \\\"unminted ticketID\\\");\\n        string memory baseURI = _baseURI();\\n        if (isBlindboxOpen) {\\n            return string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\n        } else {\\n            return string(abi.encodePacked(baseURI));\\n        }\\n    }\\n\\n    /**\\n     * @dev free mint successfully for the first time minter\\n     * however, once one own the nft, should pay to mint more (free mint, >1 mint cost).\\n     * ps: if wanna random mint can use chainlink\\n     */\\n    function mintTicket(uint8 numOfTokens) public payable returns (uint256) {\\n        require(s_saledConuter + numOfTokens < SALE_LIMIT, \\\"Ticket sale limit reached\\\");\\n        require(isSaleActive || isAllowListActive, \\\"Tickets are not allowed to sale\\\");\\n\\n        if (balanceOf(msg.sender) >= 1) {\\n            require(numOfTokens <= PUCHASE_LIMIT, \\\"Exceeded max tickets purchase\\\");\\n            require(msg.value >= PRICE_PER_TICKET * numOfTokens);\\n        }\\n        if (balanceOf(msg.sender) == 0 && balanceOf(msg.sender) > 1) {\\n            require(numOfTokens <= PUCHASE_LIMIT + 1, \\\"Exceeded max tickets purchase\\\");\\n            require(msg.value >= PRICE_PER_TICKET * (numOfTokens - 1));\\n        }\\n\\n        for (uint8 i = 0; i < numOfTokens; i++) {\\n            _safeMint(msg.sender, s_saledConuter + i);\\n        }\\n        s_saledConuter = s_saledConuter + numOfTokens;\\n        return s_saledConuter;\\n    }\\n\\n    // maybe creater(devMint) can use this function too\\n    function mintAllowList(uint8 numOfTokens) public payable {\\n        // maybe we could set whitelist allow earlier than public mint (&sale)\\n        require(isAllowListActive, \\\"Allow list is not active\\\");\\n        // maybe we could modify this function to automatically mint their max number of tokens for minter\\n        require(numOfTokens <= allowList[msg.sender], \\\"Exceed max available to purchase\\\");\\n\\n        //maybe we could modify this function to make those allowlist minter mint with lower price\\n        mintTicket(numOfTokens);\\n        allowList[msg.sender] -= numOfTokens;\\n    }\\n\\n    /**\\n     * @dev deployer can mint specific ammount of nft token without paying\\n     * ps. or use mintAllowList directally\\n     */\\n    function devMint(uint256 numOfTokens) external onlyDeployer {\\n        require(s_saledConuter + numOfTokens < SALE_LIMIT, \\\"Ticket sale limit reached\\\");\\n        require(isSaleActive || isAllowListActive, \\\"Tickets are not allowed to sale\\\");\\n\\n        for (uint256 i = 0; i < numOfTokens; i++) {\\n            _safeMint(msg.sender, s_saledConuter + i);\\n        }\\n        s_saledConuter = s_saledConuter + numOfTokens;\\n    }\\n\\n    /* View/ Pure functions */\\n    function getTokenCounter() public view returns (uint256) {\\n        return s_saledConuter - 1;\\n    }\\n\\n    function getTicketCost() public pure returns (uint256) {\\n        return PRICE_PER_TICKET;\\n    }\\n\\n    function getMintRemaining() public view returns (uint256) {\\n        return SALE_LIMIT - s_saledConuter;\\n    }\\n\\n    function getNumAvailableToMint(address _addr) public view returns (uint8) {\\n        return allowList[_addr];\\n    }\\n}\\n\",\"keccak256\":\"0x2b6cb7436380f5e1074bed397a07d69e0e8f619df9f21e06ce5f79ac568865f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405180608001604052806044815260200162003e4d60449139600b90805190602001906200003592919062000184565b503480156200004357600080fd5b506040518060400160405280600c81526020017f476f2054726176656c696e6700000000000000000000000000000000000000008152506040518060400160405280600b81526020017f54726176205469636b65740000000000000000000000000000000000000000008152508160009080519060200190620000c892919062000184565b508060019080519060200190620000e192919062000184565b505050600160098190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860006101000a81548160ff0219169083151502179055506000600660146101000a81548160ff0219169083151502179055506000600a60006101000a81548160ff02191690831515021790555062000299565b828054620001929062000263565b90600052602060002090601f016020900481019282620001b6576000855562000202565b82601f10620001d157805160ff191683800117855562000202565b8280016001018555821562000202579182015b8281111562000201578251825591602001919060010190620001e4565b5b50905062000211919062000215565b5090565b5b808211156200023057600081600090555060010162000216565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200027c57607f821691505b6020821081141562000293576200029262000234565b5b50919050565b613ba480620002a96000396000f3fe6080604052600436106101cd5760003560e01c806370a08231116100f7578063c4e3709511610095578063e707548211610064578063e70754821461067e578063e985e9c5146106a9578063ecbc5ab1146106e6578063f75f25e214610711576101cd565b8063c4e37095146105d3578063c87b56dd146105fc578063cb208dea14610639578063ddff5b1c14610662576101cd565b806395d89b41116100d157806395d89b41146105265780639884087414610551578063a22cb46514610581578063b88d4fde146105aa576101cd565b806370a0823114610497578063718bc4af146104d45780638295784d146104fd576101cd565b806330ca9fd81161016f5780634de3241c1161013e5780634de3241c146103d9578063564566a8146104045780636352211e1461042f5780636e02007d1461046c576101cd565b806330ca9fd81461031f578063375a069a1461035c5780633a31a76b1461038557806342842e0e146103b0576101cd565b8063095ea7b3116101ab578063095ea7b314610277578063212e8f67146102a057806323b872dd146102cb57806329fc6bae146102f4576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190612638565b610728565b6040516102069190612680565b60405180910390f35b34801561021b57600080fd5b5061022461080a565b6040516102319190612734565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c919061278c565b61089c565b60405161026e91906127fa565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190612841565b6108e2565b005b3480156102ac57600080fd5b506102b56109fa565b6040516102c29190612890565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed91906128ab565b610a00565b005b34801561030057600080fd5b50610309610a60565b6040516103169190612680565b60405180910390f35b34801561032b57600080fd5b50610346600480360381019061034191906128fe565b610a73565b6040516103539190612947565b60405180910390f35b34801561036857600080fd5b50610383600480360381019061037e919061278c565b610ac9565b005b34801561039157600080fd5b5061039a610c5d565b6040516103a79190612890565b60405180910390f35b3480156103bc57600080fd5b506103d760048036038101906103d291906128ab565b610c68565b005b3480156103e557600080fd5b506103ee610c88565b6040516103fb9190612947565b60405180910390f35b34801561041057600080fd5b50610419610c8d565b6040516104269190612680565b60405180910390f35b34801561043b57600080fd5b506104566004803603810190610451919061278c565b610ca0565b60405161046391906127fa565b60405180910390f35b34801561047857600080fd5b50610481610d52565b60405161048e9190612890565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b991906128fe565b610d68565b6040516104cb9190612890565b60405180910390f35b3480156104e057600080fd5b506104fb60048036038101906104f6919061298e565b610e20565b005b34801561050957600080fd5b50610524600480360381019061051f9190612a4c565b610ecd565b005b34801561053257600080fd5b5061053b611003565b6040516105489190612734565b60405180910390f35b61056b60048036038101906105669190612aac565b611095565b6040516105789190612890565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a39190612ad9565b6112d0565b005b3480156105b657600080fd5b506105d160048036038101906105cc9190612c49565b6112e6565b005b3480156105df57600080fd5b506105fa60048036038101906105f5919061298e565b611348565b005b34801561060857600080fd5b50610623600480360381019061061e919061278c565b6113f5565b6040516106309190612734565b60405180910390f35b34801561064557600080fd5b50610660600480360381019061065b9190612d6d565b6114bd565b005b61067c60048036038101906106779190612aac565b611582565b005b34801561068a57600080fd5b506106936116e6565b6040516106a09190612890565b60405180910390f35b3480156106b557600080fd5b506106d060048036038101906106cb9190612dc9565b6116fd565b6040516106dd9190612680565b60405180910390f35b3480156106f257600080fd5b506106fb611791565b6040516107089190612680565b60405180910390f35b34801561071d57600080fd5b506107266117a4565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107f357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610803575061080282611878565b5b9050919050565b60606000805461081990612e38565b80601f016020809104026020016040519081016040528092919081815260200182805461084590612e38565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b5050505050905090565b60006108a7826118e2565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108ed82610ca0565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095590612edc565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661097d61192d565b73ffffffffffffffffffffffffffffffffffffffff1614806109ac57506109ab816109a661192d565b6116fd565b5b6109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e290612f6e565b60405180910390fd5b6109f58383611935565b505050565b6103e881565b610a11610a0b61192d565b826119ee565b610a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4790613000565b60405180910390fd5b610a5b838383611a83565b505050565b600660149054906101000a900460ff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b509061306c565b60405180910390fd5b6103e881600954610b6a91906130bb565b10610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba19061315d565b60405180910390fd5b600860009054906101000a900460ff1680610bd15750600660149054906101000a900460ff165b610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c07906131c9565b60405180910390fd5b60005b81811015610c4557610c323382600954610c2d91906130bb565b611cea565b8080610c3d906131e9565b915050610c13565b5080600954610c5491906130bb565b60098190555050565b6000620f4240905090565b610c83838383604051806020016040528060008152506112e6565b505050565b600381565b600860009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d409061327e565b60405180910390fd5b80915050919050565b60006001600954610d63919061329e565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd090613344565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea79061306c565b60405180910390fd5b80600660146101000a81548160ff02191690831515021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f549061306c565b60405180910390fd5b60005b83839050811015610ffd578160076000868685818110610f8357610f82613364565b5b9050602002016020810190610f9891906128fe565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080610ff5906131e9565b915050610f60565b50505050565b60606001805461101290612e38565b80601f016020809104026020016040519081016040528092919081815260200182805461103e90612e38565b801561108b5780601f106110605761010080835404028352916020019161108b565b820191906000526020600020905b81548152906001019060200180831161106e57829003601f168201915b5050505050905090565b60006103e88260ff166009546110ab91906130bb565b106110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e29061315d565b60405180910390fd5b600860009054906101000a900460ff16806111125750600660149054906101000a900460ff165b611151576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611148906131c9565b60405180910390fd5b600161115c33610d68565b106111ca57600360ff168260ff1611156111ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a2906133df565b60405180910390fd5b8160ff16620f42406111bd91906133ff565b3410156111c957600080fd5b5b60006111d533610d68565b1480156111ea575060016111e833610d68565b115b1561127057600160036111fd9190613459565b60ff168260ff161115611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c906133df565b60405180910390fd5b6001826112529190613490565b60ff16620f424061126391906133ff565b34101561126f57600080fd5b5b60005b8260ff168160ff1610156112ae5761129b338260ff1660095461129691906130bb565b611cea565b80806112a6906134c4565b915050611273565b508160ff166009546112c091906130bb565b6009819055506009549050919050565b6112e26112db61192d565b8383611d08565b5050565b6112f76112f161192d565b836119ee565b611336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132d90613000565b60405180910390fd5b61134284848484611e75565b50505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cf9061306c565b60405180910390fd5b80600860006101000a81548160ff02191690831515021790555050565b60606113ff610d52565b821115611441576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114389061353a565b60405180910390fd5b600061144b611ed1565b9050600a60009054906101000a900460ff1615611494578061146c84611f63565b60405160200161147d9291906135e2565b6040516020818303038152906040529150506114b8565b806040516020016114a59190613611565b6040516020818303038152906040529150505b919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461154d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115449061306c565b60405180910390fd5b81600a60006101000a81548160ff02191690831515021790555080600b908051906020019061157d929190612529565b505050565b600660149054906101000a900460ff166115d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c890613674565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff168160ff161115611666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165d906136e0565b60405180910390fd5b61166f81611095565b5080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282829054906101000a900460ff166116cb9190613490565b92506101000a81548160ff021916908360ff16021790555050565b60006009546103e86116f8919061329e565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a60009054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182b9061306c565b60405180910390fd5b6000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6118eb816120c4565b61192a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119219061327e565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166119a883610ca0565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119fa83610ca0565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611a3c5750611a3b81856116fd565b5b80611a7a57508373ffffffffffffffffffffffffffffffffffffffff16611a628461089c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611aa382610ca0565b73ffffffffffffffffffffffffffffffffffffffff1614611af9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af090613772565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6090613804565b60405180910390fd5b611b74838383612130565b611b7f600082611935565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bcf919061329e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c2691906130bb565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ce5838383612135565b505050565b611d0482826040518060200160405280600081525061213a565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6e90613870565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e689190612680565b60405180910390a3505050565b611e80848484611a83565b611e8c84848484612195565b611ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec290613902565b60405180910390fd5b50505050565b6060600b8054611ee090612e38565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0c90612e38565b8015611f595780601f10611f2e57610100808354040283529160200191611f59565b820191906000526020600020905b815481529060010190602001808311611f3c57829003601f168201915b5050505050905090565b60606000821415611fab576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120bf565b600082905060005b60008214611fdd578080611fc6906131e9565b915050600a82611fd69190613951565b9150611fb3565b60008167ffffffffffffffff811115611ff957611ff8612b1e565b5b6040519080825280601f01601f19166020018201604052801561202b5781602001600182028036833780820191505090505b5090505b600085146120b857600182612044919061329e565b9150600a856120539190613982565b603061205f91906130bb565b60f81b81838151811061207557612074613364565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120b19190613951565b945061202f565b8093505050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b612144838361232c565b6121516000848484612195565b612190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218790613902565b60405180910390fd5b505050565b60006121b68473ffffffffffffffffffffffffffffffffffffffff16612506565b1561231f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026121df61192d565b8786866040518563ffffffff1660e01b81526004016122019493929190613a08565b602060405180830381600087803b15801561221b57600080fd5b505af192505050801561224c57506040513d601f19601f820116820180604052508101906122499190613a69565b60015b6122cf573d806000811461227c576040519150601f19603f3d011682016040523d82523d6000602084013e612281565b606091505b506000815114156122c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122be90613902565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612324565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561239c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239390613ae2565b60405180910390fd5b6123a5816120c4565b156123e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123dc90613b4e565b60405180910390fd5b6123f160008383612130565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461244191906130bb565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461250260008383612135565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461253590612e38565b90600052602060002090601f016020900481019282612557576000855561259e565b82601f1061257057805160ff191683800117855561259e565b8280016001018555821561259e579182015b8281111561259d578251825591602001919060010190612582565b5b5090506125ab91906125af565b5090565b5b808211156125c85760008160009055506001016125b0565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612615816125e0565b811461262057600080fd5b50565b6000813590506126328161260c565b92915050565b60006020828403121561264e5761264d6125d6565b5b600061265c84828501612623565b91505092915050565b60008115159050919050565b61267a81612665565b82525050565b60006020820190506126956000830184612671565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126d55780820151818401526020810190506126ba565b838111156126e4576000848401525b50505050565b6000601f19601f8301169050919050565b60006127068261269b565b61271081856126a6565b93506127208185602086016126b7565b612729816126ea565b840191505092915050565b6000602082019050818103600083015261274e81846126fb565b905092915050565b6000819050919050565b61276981612756565b811461277457600080fd5b50565b60008135905061278681612760565b92915050565b6000602082840312156127a2576127a16125d6565b5b60006127b084828501612777565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127e4826127b9565b9050919050565b6127f4816127d9565b82525050565b600060208201905061280f60008301846127eb565b92915050565b61281e816127d9565b811461282957600080fd5b50565b60008135905061283b81612815565b92915050565b60008060408385031215612858576128576125d6565b5b60006128668582860161282c565b925050602061287785828601612777565b9150509250929050565b61288a81612756565b82525050565b60006020820190506128a56000830184612881565b92915050565b6000806000606084860312156128c4576128c36125d6565b5b60006128d28682870161282c565b93505060206128e38682870161282c565b92505060406128f486828701612777565b9150509250925092565b600060208284031215612914576129136125d6565b5b60006129228482850161282c565b91505092915050565b600060ff82169050919050565b6129418161292b565b82525050565b600060208201905061295c6000830184612938565b92915050565b61296b81612665565b811461297657600080fd5b50565b60008135905061298881612962565b92915050565b6000602082840312156129a4576129a36125d6565b5b60006129b284828501612979565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126129e0576129df6129bb565b5b8235905067ffffffffffffffff8111156129fd576129fc6129c0565b5b602083019150836020820283011115612a1957612a186129c5565b5b9250929050565b612a298161292b565b8114612a3457600080fd5b50565b600081359050612a4681612a20565b92915050565b600080600060408486031215612a6557612a646125d6565b5b600084013567ffffffffffffffff811115612a8357612a826125db565b5b612a8f868287016129ca565b93509350506020612aa286828701612a37565b9150509250925092565b600060208284031215612ac257612ac16125d6565b5b6000612ad084828501612a37565b91505092915050565b60008060408385031215612af057612aef6125d6565b5b6000612afe8582860161282c565b9250506020612b0f85828601612979565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b56826126ea565b810181811067ffffffffffffffff82111715612b7557612b74612b1e565b5b80604052505050565b6000612b886125cc565b9050612b948282612b4d565b919050565b600067ffffffffffffffff821115612bb457612bb3612b1e565b5b612bbd826126ea565b9050602081019050919050565b82818337600083830152505050565b6000612bec612be784612b99565b612b7e565b905082815260208101848484011115612c0857612c07612b19565b5b612c13848285612bca565b509392505050565b600082601f830112612c3057612c2f6129bb565b5b8135612c40848260208601612bd9565b91505092915050565b60008060008060808587031215612c6357612c626125d6565b5b6000612c718782880161282c565b9450506020612c828782880161282c565b9350506040612c9387828801612777565b925050606085013567ffffffffffffffff811115612cb457612cb36125db565b5b612cc087828801612c1b565b91505092959194509250565b600067ffffffffffffffff821115612ce757612ce6612b1e565b5b612cf0826126ea565b9050602081019050919050565b6000612d10612d0b84612ccc565b612b7e565b905082815260208101848484011115612d2c57612d2b612b19565b5b612d37848285612bca565b509392505050565b600082601f830112612d5457612d536129bb565b5b8135612d64848260208601612cfd565b91505092915050565b60008060408385031215612d8457612d836125d6565b5b6000612d9285828601612979565b925050602083013567ffffffffffffffff811115612db357612db26125db565b5b612dbf85828601612d3f565b9150509250929050565b60008060408385031215612de057612ddf6125d6565b5b6000612dee8582860161282c565b9250506020612dff8582860161282c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e5057607f821691505b60208210811415612e6457612e63612e09565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ec66021836126a6565b9150612ed182612e6a565b604082019050919050565b60006020820190508181036000830152612ef581612eb9565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612f58603e836126a6565b9150612f6382612efc565b604082019050919050565b60006020820190508181036000830152612f8781612f4b565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612fea602e836126a6565b9150612ff582612f8e565b604082019050919050565b6000602082019050818103600083015261301981612fdd565b9050919050565b7f4f6e6c79206465706c6f79657200000000000000000000000000000000000000600082015250565b6000613056600d836126a6565b915061306182613020565b602082019050919050565b6000602082019050818103600083015261308581613049565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130c682612756565b91506130d183612756565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131065761310561308c565b5b828201905092915050565b7f5469636b65742073616c65206c696d6974207265616368656400000000000000600082015250565b60006131476019836126a6565b915061315282613111565b602082019050919050565b600060208201905081810360008301526131768161313a565b9050919050565b7f5469636b65747320617265206e6f7420616c6c6f77656420746f2073616c6500600082015250565b60006131b3601f836126a6565b91506131be8261317d565b602082019050919050565b600060208201905081810360008301526131e2816131a6565b9050919050565b60006131f482612756565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132275761322661308c565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006132686018836126a6565b915061327382613232565b602082019050919050565b600060208201905081810360008301526132978161325b565b9050919050565b60006132a982612756565b91506132b483612756565b9250828210156132c7576132c661308c565b5b828203905092915050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061332e6029836126a6565b9150613339826132d2565b604082019050919050565b6000602082019050818103600083015261335d81613321565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4578636565646564206d6178207469636b657473207075726368617365000000600082015250565b60006133c9601d836126a6565b91506133d482613393565b602082019050919050565b600060208201905081810360008301526133f8816133bc565b9050919050565b600061340a82612756565b915061341583612756565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561344e5761344d61308c565b5b828202905092915050565b60006134648261292b565b915061346f8361292b565b92508260ff038211156134855761348461308c565b5b828201905092915050565b600061349b8261292b565b91506134a68361292b565b9250828210156134b9576134b861308c565b5b828203905092915050565b60006134cf8261292b565b915060ff8214156134e3576134e261308c565b5b600182019050919050565b7f756e6d696e746564207469636b65744944000000000000000000000000000000600082015250565b60006135246011836126a6565b915061352f826134ee565b602082019050919050565b6000602082019050818103600083015261355381613517565b9050919050565b600081905092915050565b60006135708261269b565b61357a818561355a565b935061358a8185602086016126b7565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b60006135cc60058361355a565b91506135d782613596565b600582019050919050565b60006135ee8285613565565b91506135fa8284613565565b9150613605826135bf565b91508190509392505050565b600061361d8284613565565b915081905092915050565b7f416c6c6f77206c697374206973206e6f74206163746976650000000000000000600082015250565b600061365e6018836126a6565b915061366982613628565b602082019050919050565b6000602082019050818103600083015261368d81613651565b9050919050565b7f457863656564206d617820617661696c61626c6520746f207075726368617365600082015250565b60006136ca6020836126a6565b91506136d582613694565b602082019050919050565b600060208201905081810360008301526136f9816136bd565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061375c6025836126a6565b915061376782613700565b604082019050919050565b6000602082019050818103600083015261378b8161374f565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006137ee6024836126a6565b91506137f982613792565b604082019050919050565b6000602082019050818103600083015261381d816137e1565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061385a6019836126a6565b915061386582613824565b602082019050919050565b600060208201905081810360008301526138898161384d565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006138ec6032836126a6565b91506138f782613890565b604082019050919050565b6000602082019050818103600083015261391b816138df565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061395c82612756565b915061396783612756565b92508261397757613976613922565b5b828204905092915050565b600061398d82612756565b915061399883612756565b9250826139a8576139a7613922565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b60006139da826139b3565b6139e481856139be565b93506139f48185602086016126b7565b6139fd816126ea565b840191505092915050565b6000608082019050613a1d60008301876127eb565b613a2a60208301866127eb565b613a376040830185612881565b8181036060830152613a4981846139cf565b905095945050505050565b600081519050613a638161260c565b92915050565b600060208284031215613a7f57613a7e6125d6565b5b6000613a8d84828501613a54565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613acc6020836126a6565b9150613ad782613a96565b602082019050919050565b60006020820190508181036000830152613afb81613abf565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613b38601c836126a6565b9150613b4382613b02565b602082019050919050565b60006020820190508181036000830152613b6781613b2b565b905091905056fea264697066735822122024eb1d53bdf91b5227f59a8ff1ae313e2b63a22ac86ba30e666183286b2fbc2964736f6c6343000808003368747470733a2f2f697066732e696f2f697066732f516d54757053586965796a59395363397a4366347637676d4148746e43575872667972743858717a57724a6856452f",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c806370a08231116100f7578063c4e3709511610095578063e707548211610064578063e70754821461067e578063e985e9c5146106a9578063ecbc5ab1146106e6578063f75f25e214610711576101cd565b8063c4e37095146105d3578063c87b56dd146105fc578063cb208dea14610639578063ddff5b1c14610662576101cd565b806395d89b41116100d157806395d89b41146105265780639884087414610551578063a22cb46514610581578063b88d4fde146105aa576101cd565b806370a0823114610497578063718bc4af146104d45780638295784d146104fd576101cd565b806330ca9fd81161016f5780634de3241c1161013e5780634de3241c146103d9578063564566a8146104045780636352211e1461042f5780636e02007d1461046c576101cd565b806330ca9fd81461031f578063375a069a1461035c5780633a31a76b1461038557806342842e0e146103b0576101cd565b8063095ea7b3116101ab578063095ea7b314610277578063212e8f67146102a057806323b872dd146102cb57806329fc6bae146102f4576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190612638565b610728565b6040516102069190612680565b60405180910390f35b34801561021b57600080fd5b5061022461080a565b6040516102319190612734565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c919061278c565b61089c565b60405161026e91906127fa565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190612841565b6108e2565b005b3480156102ac57600080fd5b506102b56109fa565b6040516102c29190612890565b60405180910390f35b3480156102d757600080fd5b506102f260048036038101906102ed91906128ab565b610a00565b005b34801561030057600080fd5b50610309610a60565b6040516103169190612680565b60405180910390f35b34801561032b57600080fd5b50610346600480360381019061034191906128fe565b610a73565b6040516103539190612947565b60405180910390f35b34801561036857600080fd5b50610383600480360381019061037e919061278c565b610ac9565b005b34801561039157600080fd5b5061039a610c5d565b6040516103a79190612890565b60405180910390f35b3480156103bc57600080fd5b506103d760048036038101906103d291906128ab565b610c68565b005b3480156103e557600080fd5b506103ee610c88565b6040516103fb9190612947565b60405180910390f35b34801561041057600080fd5b50610419610c8d565b6040516104269190612680565b60405180910390f35b34801561043b57600080fd5b506104566004803603810190610451919061278c565b610ca0565b60405161046391906127fa565b60405180910390f35b34801561047857600080fd5b50610481610d52565b60405161048e9190612890565b60405180910390f35b3480156104a357600080fd5b506104be60048036038101906104b991906128fe565b610d68565b6040516104cb9190612890565b60405180910390f35b3480156104e057600080fd5b506104fb60048036038101906104f6919061298e565b610e20565b005b34801561050957600080fd5b50610524600480360381019061051f9190612a4c565b610ecd565b005b34801561053257600080fd5b5061053b611003565b6040516105489190612734565b60405180910390f35b61056b60048036038101906105669190612aac565b611095565b6040516105789190612890565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a39190612ad9565b6112d0565b005b3480156105b657600080fd5b506105d160048036038101906105cc9190612c49565b6112e6565b005b3480156105df57600080fd5b506105fa60048036038101906105f5919061298e565b611348565b005b34801561060857600080fd5b50610623600480360381019061061e919061278c565b6113f5565b6040516106309190612734565b60405180910390f35b34801561064557600080fd5b50610660600480360381019061065b9190612d6d565b6114bd565b005b61067c60048036038101906106779190612aac565b611582565b005b34801561068a57600080fd5b506106936116e6565b6040516106a09190612890565b60405180910390f35b3480156106b557600080fd5b506106d060048036038101906106cb9190612dc9565b6116fd565b6040516106dd9190612680565b60405180910390f35b3480156106f257600080fd5b506106fb611791565b6040516107089190612680565b60405180910390f35b34801561071d57600080fd5b506107266117a4565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107f357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610803575061080282611878565b5b9050919050565b60606000805461081990612e38565b80601f016020809104026020016040519081016040528092919081815260200182805461084590612e38565b80156108925780601f1061086757610100808354040283529160200191610892565b820191906000526020600020905b81548152906001019060200180831161087557829003601f168201915b5050505050905090565b60006108a7826118e2565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108ed82610ca0565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095590612edc565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661097d61192d565b73ffffffffffffffffffffffffffffffffffffffff1614806109ac57506109ab816109a661192d565b6116fd565b5b6109eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e290612f6e565b60405180910390fd5b6109f58383611935565b505050565b6103e881565b610a11610a0b61192d565b826119ee565b610a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4790613000565b60405180910390fd5b610a5b838383611a83565b505050565b600660149054906101000a900460ff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b509061306c565b60405180910390fd5b6103e881600954610b6a91906130bb565b10610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba19061315d565b60405180910390fd5b600860009054906101000a900460ff1680610bd15750600660149054906101000a900460ff165b610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c07906131c9565b60405180910390fd5b60005b81811015610c4557610c323382600954610c2d91906130bb565b611cea565b8080610c3d906131e9565b915050610c13565b5080600954610c5491906130bb565b60098190555050565b6000620f4240905090565b610c83838383604051806020016040528060008152506112e6565b505050565b600381565b600860009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d409061327e565b60405180910390fd5b80915050919050565b60006001600954610d63919061329e565b905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd090613344565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea79061306c565b60405180910390fd5b80600660146101000a81548160ff02191690831515021790555050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f549061306c565b60405180910390fd5b60005b83839050811015610ffd578160076000868685818110610f8357610f82613364565b5b9050602002016020810190610f9891906128fe565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080610ff5906131e9565b915050610f60565b50505050565b60606001805461101290612e38565b80601f016020809104026020016040519081016040528092919081815260200182805461103e90612e38565b801561108b5780601f106110605761010080835404028352916020019161108b565b820191906000526020600020905b81548152906001019060200180831161106e57829003601f168201915b5050505050905090565b60006103e88260ff166009546110ab91906130bb565b106110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e29061315d565b60405180910390fd5b600860009054906101000a900460ff16806111125750600660149054906101000a900460ff165b611151576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611148906131c9565b60405180910390fd5b600161115c33610d68565b106111ca57600360ff168260ff1611156111ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a2906133df565b60405180910390fd5b8160ff16620f42406111bd91906133ff565b3410156111c957600080fd5b5b60006111d533610d68565b1480156111ea575060016111e833610d68565b115b1561127057600160036111fd9190613459565b60ff168260ff161115611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c906133df565b60405180910390fd5b6001826112529190613490565b60ff16620f424061126391906133ff565b34101561126f57600080fd5b5b60005b8260ff168160ff1610156112ae5761129b338260ff1660095461129691906130bb565b611cea565b80806112a6906134c4565b915050611273565b508160ff166009546112c091906130bb565b6009819055506009549050919050565b6112e26112db61192d565b8383611d08565b5050565b6112f76112f161192d565b836119ee565b611336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132d90613000565b60405180910390fd5b61134284848484611e75565b50505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cf9061306c565b60405180910390fd5b80600860006101000a81548160ff02191690831515021790555050565b60606113ff610d52565b821115611441576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114389061353a565b60405180910390fd5b600061144b611ed1565b9050600a60009054906101000a900460ff1615611494578061146c84611f63565b60405160200161147d9291906135e2565b6040516020818303038152906040529150506114b8565b806040516020016114a59190613611565b6040516020818303038152906040529150505b919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461154d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115449061306c565b60405180910390fd5b81600a60006101000a81548160ff02191690831515021790555080600b908051906020019061157d929190612529565b505050565b600660149054906101000a900460ff166115d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c890613674565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff168160ff161115611666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165d906136e0565b60405180910390fd5b61166f81611095565b5080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282829054906101000a900460ff166116cb9190613490565b92506101000a81548160ff021916908360ff16021790555050565b60006009546103e86116f8919061329e565b905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600a60009054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182b9061306c565b60405180910390fd5b6000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6118eb816120c4565b61192a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119219061327e565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166119a883610ca0565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119fa83610ca0565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611a3c5750611a3b81856116fd565b5b80611a7a57508373ffffffffffffffffffffffffffffffffffffffff16611a628461089c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611aa382610ca0565b73ffffffffffffffffffffffffffffffffffffffff1614611af9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af090613772565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6090613804565b60405180910390fd5b611b74838383612130565b611b7f600082611935565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bcf919061329e565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c2691906130bb565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ce5838383612135565b505050565b611d0482826040518060200160405280600081525061213a565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6e90613870565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e689190612680565b60405180910390a3505050565b611e80848484611a83565b611e8c84848484612195565b611ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec290613902565b60405180910390fd5b50505050565b6060600b8054611ee090612e38565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0c90612e38565b8015611f595780601f10611f2e57610100808354040283529160200191611f59565b820191906000526020600020905b815481529060010190602001808311611f3c57829003601f168201915b5050505050905090565b60606000821415611fab576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120bf565b600082905060005b60008214611fdd578080611fc6906131e9565b915050600a82611fd69190613951565b9150611fb3565b60008167ffffffffffffffff811115611ff957611ff8612b1e565b5b6040519080825280601f01601f19166020018201604052801561202b5781602001600182028036833780820191505090505b5090505b600085146120b857600182612044919061329e565b9150600a856120539190613982565b603061205f91906130bb565b60f81b81838151811061207557612074613364565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120b19190613951565b945061202f565b8093505050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b612144838361232c565b6121516000848484612195565b612190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218790613902565b60405180910390fd5b505050565b60006121b68473ffffffffffffffffffffffffffffffffffffffff16612506565b1561231f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026121df61192d565b8786866040518563ffffffff1660e01b81526004016122019493929190613a08565b602060405180830381600087803b15801561221b57600080fd5b505af192505050801561224c57506040513d601f19601f820116820180604052508101906122499190613a69565b60015b6122cf573d806000811461227c576040519150601f19603f3d011682016040523d82523d6000602084013e612281565b606091505b506000815114156122c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122be90613902565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612324565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561239c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239390613ae2565b60405180910390fd5b6123a5816120c4565b156123e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123dc90613b4e565b60405180910390fd5b6123f160008383612130565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461244191906130bb565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461250260008383612135565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461253590612e38565b90600052602060002090601f016020900481019282612557576000855561259e565b82601f1061257057805160ff191683800117855561259e565b8280016001018555821561259e579182015b8281111561259d578251825591602001919060010190612582565b5b5090506125ab91906125af565b5090565b5b808211156125c85760008160009055506001016125b0565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612615816125e0565b811461262057600080fd5b50565b6000813590506126328161260c565b92915050565b60006020828403121561264e5761264d6125d6565b5b600061265c84828501612623565b91505092915050565b60008115159050919050565b61267a81612665565b82525050565b60006020820190506126956000830184612671565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156126d55780820151818401526020810190506126ba565b838111156126e4576000848401525b50505050565b6000601f19601f8301169050919050565b60006127068261269b565b61271081856126a6565b93506127208185602086016126b7565b612729816126ea565b840191505092915050565b6000602082019050818103600083015261274e81846126fb565b905092915050565b6000819050919050565b61276981612756565b811461277457600080fd5b50565b60008135905061278681612760565b92915050565b6000602082840312156127a2576127a16125d6565b5b60006127b084828501612777565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127e4826127b9565b9050919050565b6127f4816127d9565b82525050565b600060208201905061280f60008301846127eb565b92915050565b61281e816127d9565b811461282957600080fd5b50565b60008135905061283b81612815565b92915050565b60008060408385031215612858576128576125d6565b5b60006128668582860161282c565b925050602061287785828601612777565b9150509250929050565b61288a81612756565b82525050565b60006020820190506128a56000830184612881565b92915050565b6000806000606084860312156128c4576128c36125d6565b5b60006128d28682870161282c565b93505060206128e38682870161282c565b92505060406128f486828701612777565b9150509250925092565b600060208284031215612914576129136125d6565b5b60006129228482850161282c565b91505092915050565b600060ff82169050919050565b6129418161292b565b82525050565b600060208201905061295c6000830184612938565b92915050565b61296b81612665565b811461297657600080fd5b50565b60008135905061298881612962565b92915050565b6000602082840312156129a4576129a36125d6565b5b60006129b284828501612979565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126129e0576129df6129bb565b5b8235905067ffffffffffffffff8111156129fd576129fc6129c0565b5b602083019150836020820283011115612a1957612a186129c5565b5b9250929050565b612a298161292b565b8114612a3457600080fd5b50565b600081359050612a4681612a20565b92915050565b600080600060408486031215612a6557612a646125d6565b5b600084013567ffffffffffffffff811115612a8357612a826125db565b5b612a8f868287016129ca565b93509350506020612aa286828701612a37565b9150509250925092565b600060208284031215612ac257612ac16125d6565b5b6000612ad084828501612a37565b91505092915050565b60008060408385031215612af057612aef6125d6565b5b6000612afe8582860161282c565b9250506020612b0f85828601612979565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612b56826126ea565b810181811067ffffffffffffffff82111715612b7557612b74612b1e565b5b80604052505050565b6000612b886125cc565b9050612b948282612b4d565b919050565b600067ffffffffffffffff821115612bb457612bb3612b1e565b5b612bbd826126ea565b9050602081019050919050565b82818337600083830152505050565b6000612bec612be784612b99565b612b7e565b905082815260208101848484011115612c0857612c07612b19565b5b612c13848285612bca565b509392505050565b600082601f830112612c3057612c2f6129bb565b5b8135612c40848260208601612bd9565b91505092915050565b60008060008060808587031215612c6357612c626125d6565b5b6000612c718782880161282c565b9450506020612c828782880161282c565b9350506040612c9387828801612777565b925050606085013567ffffffffffffffff811115612cb457612cb36125db565b5b612cc087828801612c1b565b91505092959194509250565b600067ffffffffffffffff821115612ce757612ce6612b1e565b5b612cf0826126ea565b9050602081019050919050565b6000612d10612d0b84612ccc565b612b7e565b905082815260208101848484011115612d2c57612d2b612b19565b5b612d37848285612bca565b509392505050565b600082601f830112612d5457612d536129bb565b5b8135612d64848260208601612cfd565b91505092915050565b60008060408385031215612d8457612d836125d6565b5b6000612d9285828601612979565b925050602083013567ffffffffffffffff811115612db357612db26125db565b5b612dbf85828601612d3f565b9150509250929050565b60008060408385031215612de057612ddf6125d6565b5b6000612dee8582860161282c565b9250506020612dff8582860161282c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e5057607f821691505b60208210811415612e6457612e63612e09565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ec66021836126a6565b9150612ed182612e6a565b604082019050919050565b60006020820190508181036000830152612ef581612eb9565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612f58603e836126a6565b9150612f6382612efc565b604082019050919050565b60006020820190508181036000830152612f8781612f4b565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612fea602e836126a6565b9150612ff582612f8e565b604082019050919050565b6000602082019050818103600083015261301981612fdd565b9050919050565b7f4f6e6c79206465706c6f79657200000000000000000000000000000000000000600082015250565b6000613056600d836126a6565b915061306182613020565b602082019050919050565b6000602082019050818103600083015261308581613049565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006130c682612756565b91506130d183612756565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131065761310561308c565b5b828201905092915050565b7f5469636b65742073616c65206c696d6974207265616368656400000000000000600082015250565b60006131476019836126a6565b915061315282613111565b602082019050919050565b600060208201905081810360008301526131768161313a565b9050919050565b7f5469636b65747320617265206e6f7420616c6c6f77656420746f2073616c6500600082015250565b60006131b3601f836126a6565b91506131be8261317d565b602082019050919050565b600060208201905081810360008301526131e2816131a6565b9050919050565b60006131f482612756565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132275761322661308c565b5b600182019050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006132686018836126a6565b915061327382613232565b602082019050919050565b600060208201905081810360008301526132978161325b565b9050919050565b60006132a982612756565b91506132b483612756565b9250828210156132c7576132c661308c565b5b828203905092915050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061332e6029836126a6565b9150613339826132d2565b604082019050919050565b6000602082019050818103600083015261335d81613321565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4578636565646564206d6178207469636b657473207075726368617365000000600082015250565b60006133c9601d836126a6565b91506133d482613393565b602082019050919050565b600060208201905081810360008301526133f8816133bc565b9050919050565b600061340a82612756565b915061341583612756565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561344e5761344d61308c565b5b828202905092915050565b60006134648261292b565b915061346f8361292b565b92508260ff038211156134855761348461308c565b5b828201905092915050565b600061349b8261292b565b91506134a68361292b565b9250828210156134b9576134b861308c565b5b828203905092915050565b60006134cf8261292b565b915060ff8214156134e3576134e261308c565b5b600182019050919050565b7f756e6d696e746564207469636b65744944000000000000000000000000000000600082015250565b60006135246011836126a6565b915061352f826134ee565b602082019050919050565b6000602082019050818103600083015261355381613517565b9050919050565b600081905092915050565b60006135708261269b565b61357a818561355a565b935061358a8185602086016126b7565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b60006135cc60058361355a565b91506135d782613596565b600582019050919050565b60006135ee8285613565565b91506135fa8284613565565b9150613605826135bf565b91508190509392505050565b600061361d8284613565565b915081905092915050565b7f416c6c6f77206c697374206973206e6f74206163746976650000000000000000600082015250565b600061365e6018836126a6565b915061366982613628565b602082019050919050565b6000602082019050818103600083015261368d81613651565b9050919050565b7f457863656564206d617820617661696c61626c6520746f207075726368617365600082015250565b60006136ca6020836126a6565b91506136d582613694565b602082019050919050565b600060208201905081810360008301526136f9816136bd565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061375c6025836126a6565b915061376782613700565b604082019050919050565b6000602082019050818103600083015261378b8161374f565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006137ee6024836126a6565b91506137f982613792565b604082019050919050565b6000602082019050818103600083015261381d816137e1565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061385a6019836126a6565b915061386582613824565b602082019050919050565b600060208201905081810360008301526138898161384d565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006138ec6032836126a6565b91506138f782613890565b604082019050919050565b6000602082019050818103600083015261391b816138df565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061395c82612756565b915061396783612756565b92508261397757613976613922565b5b828204905092915050565b600061398d82612756565b915061399883612756565b9250826139a8576139a7613922565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b60006139da826139b3565b6139e481856139be565b93506139f48185602086016126b7565b6139fd816126ea565b840191505092915050565b6000608082019050613a1d60008301876127eb565b613a2a60208301866127eb565b613a376040830185612881565b8181036060830152613a4981846139cf565b905095945050505050565b600081519050613a638161260c565b92915050565b600060208284031215613a7f57613a7e6125d6565b5b6000613a8d84828501613a54565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613acc6020836126a6565b9150613ad782613a96565b602082019050919050565b60006020820190508181036000830152613afb81613abf565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613b38601c836126a6565b9150613b4382613b02565b602082019050919050565b60006020820190508181036000830152613b6781613b2b565b905091905056fea264697066735822122024eb1d53bdf91b5227f59a8ff1ae313e2b63a22ac86ba30e666183286b2fbc2964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "devMint(uint256)": {
        "details": "deployer can mint specific ammount of nft token without paying ps. or use mintAllowList directally"
      },
      "dropDeployer()": {
        "details": "transfer the ownership of the contract to null address"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintTicket(uint8)": {
        "details": "free mint successfully for the first time minter however, once one own the nft, should pay to mint more (free mint, >1 mint cost). ps: if wanna random mint can use chainlink"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1616,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "deployer",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 1618,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "isAllowListActive",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1622,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "allowList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 1624,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "isSaleActive",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 1626,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "s_saledConuter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1637,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "isBlindboxOpen",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1640,
        "contract": "contracts/travelNFT_mint.sol:travelNFT_mint",
        "label": "ticketURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}